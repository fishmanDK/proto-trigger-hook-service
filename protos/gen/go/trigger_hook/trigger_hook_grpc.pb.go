// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: trigger_hook/trigger_hook.proto

package trg_hk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TriggerHookManager_ScheduleFullDeletion_FullMethodName    = "/trigger_hook.TriggerHookManager/ScheduleFullDeletion"
	TriggerHookManager_SchedulePartialDeletion_FullMethodName = "/trigger_hook.TriggerHookManager/SchedulePartialDeletion"
)

// TriggerHookManagerClient is the client API for TriggerHookManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerHookManagerClient interface {
	ScheduleFullDeletion(ctx context.Context, in *CreateFullDeletionRequest, opts ...grpc.CallOption) (*NewDeletionResponse, error)
	SchedulePartialDeletion(ctx context.Context, in *CreatePartialDeletionRequest, opts ...grpc.CallOption) (*NewDeletionResponse, error)
}

type triggerHookManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerHookManagerClient(cc grpc.ClientConnInterface) TriggerHookManagerClient {
	return &triggerHookManagerClient{cc}
}

func (c *triggerHookManagerClient) ScheduleFullDeletion(ctx context.Context, in *CreateFullDeletionRequest, opts ...grpc.CallOption) (*NewDeletionResponse, error) {
	out := new(NewDeletionResponse)
	err := c.cc.Invoke(ctx, TriggerHookManager_ScheduleFullDeletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerHookManagerClient) SchedulePartialDeletion(ctx context.Context, in *CreatePartialDeletionRequest, opts ...grpc.CallOption) (*NewDeletionResponse, error) {
	out := new(NewDeletionResponse)
	err := c.cc.Invoke(ctx, TriggerHookManager_SchedulePartialDeletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerHookManagerServer is the server API for TriggerHookManager service.
// All implementations must embed UnimplementedTriggerHookManagerServer
// for forward compatibility
type TriggerHookManagerServer interface {
	ScheduleFullDeletion(context.Context, *CreateFullDeletionRequest) (*NewDeletionResponse, error)
	SchedulePartialDeletion(context.Context, *CreatePartialDeletionRequest) (*NewDeletionResponse, error)
	mustEmbedUnimplementedTriggerHookManagerServer()
}

// UnimplementedTriggerHookManagerServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerHookManagerServer struct {
}

func (UnimplementedTriggerHookManagerServer) ScheduleFullDeletion(context.Context, *CreateFullDeletionRequest) (*NewDeletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleFullDeletion not implemented")
}
func (UnimplementedTriggerHookManagerServer) SchedulePartialDeletion(context.Context, *CreatePartialDeletionRequest) (*NewDeletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulePartialDeletion not implemented")
}
func (UnimplementedTriggerHookManagerServer) mustEmbedUnimplementedTriggerHookManagerServer() {}

// UnsafeTriggerHookManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerHookManagerServer will
// result in compilation errors.
type UnsafeTriggerHookManagerServer interface {
	mustEmbedUnimplementedTriggerHookManagerServer()
}

func RegisterTriggerHookManagerServer(s grpc.ServiceRegistrar, srv TriggerHookManagerServer) {
	s.RegisterService(&TriggerHookManager_ServiceDesc, srv)
}

func _TriggerHookManager_ScheduleFullDeletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFullDeletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerHookManagerServer).ScheduleFullDeletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerHookManager_ScheduleFullDeletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerHookManagerServer).ScheduleFullDeletion(ctx, req.(*CreateFullDeletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerHookManager_SchedulePartialDeletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartialDeletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerHookManagerServer).SchedulePartialDeletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerHookManager_SchedulePartialDeletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerHookManagerServer).SchedulePartialDeletion(ctx, req.(*CreatePartialDeletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerHookManager_ServiceDesc is the grpc.ServiceDesc for TriggerHookManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerHookManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trigger_hook.TriggerHookManager",
	HandlerType: (*TriggerHookManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleFullDeletion",
			Handler:    _TriggerHookManager_ScheduleFullDeletion_Handler,
		},
		{
			MethodName: "SchedulePartialDeletion",
			Handler:    _TriggerHookManager_SchedulePartialDeletion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trigger_hook/trigger_hook.proto",
}
